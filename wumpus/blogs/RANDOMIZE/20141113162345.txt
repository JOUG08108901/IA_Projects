My curNode: (1;1)
 I go to shortest Safe Path To Unvisited
My direction is: E
New and last directions equals. I go forward.
My curNode: (2;1)
 I go to shortest Safe Path To Unvisited
My direction is: E
New and last directions equals. I go forward.
My curNode: (3;1)
 I go to shortest Safe Path To Unvisited
My direction is: E
New and last directions equals. I go forward.
My curNode: (3;1)
 I go to shortest Safe Path To Unvisited
My direction is: N
I turn left.
My curNode: (3;1)
 I go to shortest Safe Path To Unvisited
My direction is: N
New and last directions equals. I go forward.
My curNode: (3;2)
 I go to shortest Safe Path To Unvisited
My direction is: N
New and last directions equals. I go forward.
My curNode: (3;3)
 I go to shortest Safe Path To Unvisited
My direction is: N
New and last directions equals. I go forward.
My curNode: (3;4) hasBreeze 
 I go to shortest Safe Path To Unvisited
My direction is: S
I turn right.
My curNode: (3;4) hasBreeze 
 I go to shortest Safe Path To Unvisited
My direction is: S
I turn right.
My curNode: (3;4) hasBreeze 
 I go to shortest Safe Path To Unvisited
My direction is: S
New and last directions equals. I go forward.
My curNode: (3;3)
 I go to shortest Safe Path To Unvisited
My direction is: E
I turn left.
My curNode: (3;3)
 I go to shortest Safe Path To Unvisited
My direction is: E
New and last directions equals. I go forward.
My curNode: (4;3) hasBreeze 
 I go to shortest Safe Path To Unvisited
My direction is: S
I turn right.
My curNode: (4;3) hasBreeze 
 I go to shortest Safe Path To Unvisited
My direction is: S
New and last directions equals. I go forward.
My curNode: (4;2)
 I go to shortest Safe Path To Unvisited
My direction is: E
I turn left.
My curNode: (4;2)
 I go to shortest Safe Path To Unvisited
My direction is: E
New and last directions equals. I go forward.
My curNode: (5;2)
 I go to shortest Safe Path To Unvisited
My direction is: E
New and last directions equals. I go forward.
My curNode: (6;2)
 I go to shortest Safe Path To Unvisited
My direction is: E
New and last directions equals. I go forward.
My curNode: (7;2)
 I go to shortest Safe Path To Unvisited
My direction is: E
New and last directions equals. I go forward.
My curNode: (8;2)
 I go to shortest Safe Path To Unvisited
My direction is: E
New and last directions equals. I go forward.
My curNode: (9;2) hasBreeze 
 I go to shortest Safe Path To Unvisited
My direction is: W
I turn right.
My curNode: (9;2) hasBreeze 
 I go to shortest Safe Path To Unvisited
My direction is: W
I turn right.
My curNode: (9;2) hasBreeze 
 I go to shortest Safe Path To Unvisited
My direction is: W
New and last directions equals. I go forward.
My curNode: (8;2)
 I go to shortest Safe Path To Unvisited
My direction is: S
I turn left.
My curNode: (8;2)
 I go to shortest Safe Path To Unvisited
My direction is: S
New and last directions equals. I go forward.
My curNode: (8;1) hasBreeze 
 I go to shortest Safe Path To Unvisited
My direction is: W
I turn right.
My curNode: (8;1) hasBreeze 
 I go to shortest Safe Path To Unvisited
My direction is: W
New and last directions equals. I go forward.
My curNode: (7;1)
 I go to shortest Safe Path To Unvisited
My direction is: W
New and last directions equals. I go forward.
My curNode: (6;1)
 I go to shortest Safe Path To Unvisited
My direction is: W
New and last directions equals. I go forward.
My curNode: (6;1)
 I go to shortest Safe Path To Unvisited
My direction is: S
I turn left.
My curNode: (6;1)
 I go to shortest Safe Path To Unvisited
My direction is: S
New and last directions equals. I go forward.
My curNode: (6;1)
 I go to shortest Safe Path To Unvisited
My direction is: E
I turn left.
My curNode: (6;1)
 I go to shortest Safe Path To Unvisited
My direction is: E
New and last directions equals. I go forward.
My curNode: (7;1)
 I go to shortest Safe Path To Unvisited
My direction is: S
I turn right.
My curNode: (7;1)
 I go to shortest Safe Path To Unvisited
My direction is: S
New and last directions equals. I go forward.
My curNode: (7;1)
 I go to shortest Safe Path To Unvisited
My direction is: N
I turn right.
My curNode: (7;1)
 I go to shortest Safe Path To Unvisited
My direction is: N
I turn right.
My curNode: (7;1)
 I go to shortest Safe Path To Unvisited
My direction is: N
New and last directions equals. I go forward.
My curNode: (7;2)
 I go to shortest Safe Path To Unvisited
My direction is: N
New and last directions equals. I go forward.
My curNode: (7;3)
 I go to shortest Safe Path To Unvisited
My direction is: N
New and last directions equals. I go forward.
My curNode: (7;4) hasBreeze 
 I go to shortest Safe Path To Unvisited
My direction is: S
I turn right.
My curNode: (7;4) hasBreeze 
 I go to shortest Safe Path To Unvisited
My direction is: S
I turn right.
My curNode: (7;4) hasBreeze 
 I go to shortest Safe Path To Unvisited
My direction is: S
New and last directions equals. I go forward.
My curNode: (7;3)
 I go to shortest Safe Path To Unvisited
My direction is: E
I turn left.
My curNode: (7;3)
 I go to shortest Safe Path To Unvisited
My direction is: E
New and last directions equals. I go forward.
My curNode: (8;3)
 I go to shortest Safe Path To Unvisited
My direction is: E
New and last directions equals. I go forward.
My curNode: (9;3)
 I go to shortest Safe Path To Unvisited
My direction is: E
New and last directions equals. I go forward.
My curNode: (10;3)
 I go to shortest Safe Path To Unvisited
My direction is: E
New and last directions equals. I go forward.
My curNode: (10;3)
 I go to shortest Safe Path To Unvisited
My direction is: N
I turn left.
My curNode: (10;3)
 I go to shortest Safe Path To Unvisited
My direction is: N
New and last directions equals. I go forward.
My curNode: (10;4) hasBreeze 
 I go to shortest Safe Path To Unvisited
My direction is: W
I turn left.
My curNode: (10;4) hasBreeze 
 I go to shortest Safe Path To Unvisited
My direction is: W
New and last directions equals. I go forward.
My curNode: (9;4)
 I go to shortest Safe Path To Unvisited
My direction is: W
New and last directions equals. I go forward.
My curNode: (8;4)
 I go to shortest Safe Path To Unvisited
My direction is: N
I turn right.
My curNode: (8;4)
 I go to shortest Safe Path To Unvisited
My direction is: N
New and last directions equals. I go forward.
My curNode: (8;5) hasBreeze  hasMoo 
Cannot deduce Supmuw's friendliness.
 I go to shortest Safe Path To Unvisited
My direction is: E
I turn right.
My curNode: (8;5) hasBreeze  hasMoo 
Cannot deduce Supmuw's friendliness.
 I go to shortest Safe Path To Unvisited
My direction is: E
New and last directions equals. I go forward.
My curNode: (9;5) hasBreeze 
Cannot deduce Supmuw's friendliness.
 I go to shortest Safe Path To Unvisited
My direction is: S
I turn right.
My curNode: (9;5) hasBreeze 
Cannot deduce Supmuw's friendliness.
 I go to shortest Safe Path To Unvisited
My direction is: S
New and last directions equals. I go forward.
My curNode: (9;4)
Cannot deduce Supmuw's friendliness.
 I go to shortest Safe Path To Unvisited
My direction is: S
New and last directions equals. I go forward.
My curNode: (9;3)
Cannot deduce Supmuw's friendliness.
 I go to shortest Safe Path To Unvisited
My direction is: S
New and last directions equals. I go forward.
My curNode: (9;2) hasBreeze 
Cannot deduce Supmuw's friendliness.
 I go to shortest Safe Path To Unvisited
My direction is: E
I turn left.
My curNode: (9;2) hasBreeze 
Cannot deduce Supmuw's friendliness.
 I go to shortest Safe Path To Unvisited
My direction is: E
New and last directions equals. I go forward.
My curNode: (10;2)
Cannot deduce Supmuw's friendliness.
 I go to shortest Safe Path To Unvisited
My direction is: E
New and last directions equals. I go forward.
My curNode: (10;2)
Cannot deduce Supmuw's friendliness.
 I go to shortest Safe Path To Unvisited
My direction is: S
I turn right.
My curNode: (10;2)
Cannot deduce Supmuw's friendliness.
 I go to shortest Safe Path To Unvisited
My direction is: S
New and last directions equals. I go forward.
My curNode: (10;1) hasBreeze 
Cannot deduce Supmuw's friendliness.
 I go to shortest Safe Path To Unvisited
My direction is: N
I turn right.
My curNode: (10;1) hasBreeze 
Cannot deduce Supmuw's friendliness.
 I go to shortest Safe Path To Unvisited
My direction is: N
I turn right.
My curNode: (10;1) hasBreeze 
Cannot deduce Supmuw's friendliness.
 I go to shortest Safe Path To Unvisited
My direction is: N
New and last directions equals. I go forward.
My curNode: (10;2)
Cannot deduce Supmuw's friendliness.
 I go to shortest Safe Path To Unvisited
My direction is: N
New and last directions equals. I go forward.
My curNode: (10;3)
Cannot deduce Supmuw's friendliness.
 I go to shortest Safe Path To Unvisited
My direction is: W
I turn left.
My curNode: (10;3)
Cannot deduce Supmuw's friendliness.
 I go to shortest Safe Path To Unvisited
My direction is: W
New and last directions equals. I go forward.
My curNode: (9;3)
Cannot deduce Supmuw's friendliness.
 I go to shortest Safe Path To Unvisited
My direction is: W
New and last directions equals. I go forward.
My curNode: (8;3)
Cannot deduce Supmuw's friendliness.
 I go to shortest Safe Path To Unvisited
My direction is: W
New and last directions equals. I go forward.
My curNode: (7;3)
Cannot deduce Supmuw's friendliness.
 I go to shortest Safe Path To Unvisited
My direction is: W
New and last directions equals. I go forward.
My curNode: (6;3) hasBreeze 
Cannot deduce Supmuw's friendliness.
 I go to shortest Safe Path To Unvisited
My direction is: W
New and last directions equals. I go forward.
My curNode: (5;3) hasBreeze 
Cannot deduce Supmuw's friendliness.
 I go to shortest Safe Path To Unvisited
My direction is: W
New and last directions equals. I go forward.
My curNode: (4;3) hasBreeze 
Cannot deduce Supmuw's friendliness.
 I go to shortest Safe Path To Unvisited
My direction is: W
New and last directions equals. I go forward.
My curNode: (3;3)
Cannot deduce Supmuw's friendliness.
 I go to shortest Safe Path To Unvisited
My direction is: W
New and last directions equals. I go forward.
My curNode: (2;3)
Cannot deduce Supmuw's friendliness.
 I go to shortest Safe Path To Unvisited
My direction is: W
New and last directions equals. I go forward.
My curNode: (1;3) hasBreeze 
Cannot deduce Supmuw's friendliness.
curNode has gold and i grab the gold.
My curNode: (1;3) hasBreeze 
Cannot deduce Supmuw's friendliness.
 I go to shortest Safe Path To Unvisited
My direction is: S
I turn left.
My curNode: (1;3) hasBreeze 
Cannot deduce Supmuw's friendliness.
 I go to shortest Safe Path To Unvisited
My direction is: S
New and last directions equals. I go forward.
My curNode: (1;2)
Cannot deduce Supmuw's friendliness.
 I go to shortest Safe Path To Unvisited
My direction is: E
I turn left.
My curNode: (1;2)
Cannot deduce Supmuw's friendliness.
 I go to shortest Safe Path To Unvisited
My direction is: E
New and last directions equals. I go forward.
My curNode: (2;2)
Cannot deduce Supmuw's friendliness.
 I go to shortest Safe Path To Unvisited
My direction is: S
I turn right.
My curNode: (2;2)
Cannot deduce Supmuw's friendliness.
 I go to shortest Safe Path To Unvisited
My direction is: S
New and last directions equals. I go forward.
My curNode: (2;1)
Cannot deduce Supmuw's friendliness.
 I go to shortest Safe Path To Unvisited
My direction is: S
New and last directions equals. I go forward.
My curNode: (2;1)
Cannot deduce Supmuw's friendliness.
 I go to shortest Safe Path To Unvisited
My direction is: W
I turn right.
My curNode: (2;1)
Cannot deduce Supmuw's friendliness.
 I go to shortest Safe Path To Unvisited
My direction is: W
New and last directions equals. I go forward.
My curNode: (1;1)
Cannot deduce Supmuw's friendliness.
 I go to shortest Safe Path To Unvisited
My direction is: W
New and last directions equals. I go forward.
My curNode: (1;1)
Cannot deduce Supmuw's friendliness.
 I go to shortest Safe Path To Unvisited
My direction is: S
I turn left.
My curNode: (1;1)
Cannot deduce Supmuw's friendliness.
 I go to shortest Safe Path To Unvisited
My direction is: S
New and last directions equals. I go forward.
My curNode: (1;1)
Cannot deduce Supmuw's friendliness.
 I go to shortest Safe Path To Unvisited
My direction is: N
I turn right.
My curNode: (1;1)
Cannot deduce Supmuw's friendliness.
 I go to shortest Safe Path To Unvisited
My direction is: N
I turn right.
My curNode: (1;1)
Cannot deduce Supmuw's friendliness.
 I go to shortest Safe Path To Unvisited
My direction is: N
New and last directions equals. I go forward.
My curNode: (1;2)
Cannot deduce Supmuw's friendliness.
 I go to shortest Safe Path To Unvisited
My direction is: W
I turn left.
My curNode: (1;2)
Cannot deduce Supmuw's friendliness.
 I go to shortest Safe Path To Unvisited
My direction is: W
New and last directions equals. I go forward.
My curNode: (1;2)
Cannot deduce Supmuw's friendliness.
 I go to shortest Safe Path To Unvisited
My direction is: N
I turn right.
My curNode: (1;2)
Cannot deduce Supmuw's friendliness.
 I go to shortest Safe Path To Unvisited
My direction is: N
New and last directions equals. I go forward.
My curNode: (1;3) hasBreeze 
Cannot deduce Supmuw's friendliness.
 I go to shortest Safe Path To Unvisited
My direction is: E
I turn right.
My curNode: (1;3) hasBreeze 
Cannot deduce Supmuw's friendliness.
 I go to shortest Safe Path To Unvisited
My direction is: E
New and last directions equals. I go forward.
My curNode: (2;3)
Cannot deduce Supmuw's friendliness.
 I go to shortest Safe Path To Unvisited
My direction is: N
I turn left.
My curNode: (2;3)
Cannot deduce Supmuw's friendliness.
 I go to shortest Safe Path To Unvisited
My direction is: N
New and last directions equals. I go forward.
My curNode: (2;3)
Cannot deduce Supmuw's friendliness.
 I go to shortest Safe Path To Unvisited
My direction is: E
I turn right.
My curNode: (2;3)
Cannot deduce Supmuw's friendliness.
 I go to shortest Safe Path To Unvisited
My direction is: E
New and last directions equals. I go forward.
My curNode: (3;3)
Cannot deduce Supmuw's friendliness.
 I go to shortest Safe Path To Unvisited
My direction is: S
I turn right.
My curNode: (3;3)
Cannot deduce Supmuw's friendliness.
 I go to shortest Safe Path To Unvisited
My direction is: S
New and last directions equals. I go forward.
My curNode: (3;2)
Cannot deduce Supmuw's friendliness.
 I go to shortest Safe Path To Unvisited
My direction is: S
New and last directions equals. I go forward.
My curNode: (3;1)
Cannot deduce Supmuw's friendliness.
 I go to shortest Safe Path To Unvisited
My direction is: S
New and last directions equals. I go forward.
My curNode: (3;1)
Cannot deduce Supmuw's friendliness.
 I go to shortest Safe Path To Unvisited
goDirection is IDLE. I go home
My direction is: W
I turn right.
My curNode: (3;1)
Cannot deduce Supmuw's friendliness.
goDirection is IDLE. I go home
My direction is: W
New and last directions equals. I go forward.
My curNode: (2;1)
Cannot deduce Supmuw's friendliness.
goDirection is IDLE. I go home
My direction is: W
New and last directions equals. I go forward.
My curNode: (1;1)
Cannot deduce Supmuw's friendliness.
I wants to leave and I am at entrance, climb out!
My curNode: (1;1)
Cannot deduce Supmuw's friendliness.
I wants to leave and I am at entrance, climb out!
